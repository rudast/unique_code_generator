<?php
/**
 * @file
 * Defines an example shipping method for testing and development.
 */

/**
 * Implements hook_permission().
 *
 * Defines new permissions for administrating and crating codes
 */
function unique_code_generator_permission() {
  return array(
    'administer unique code generator' => array(
      'title' => t('Administer unique code generator'),
      'description' => t('Allows to use administration interface for Unique code generator'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function unique_code_generator_menu($items)
{
$items = array ();
  $items['admin/config/content/settings/unique_code_generator'] = array(
    'title' => 'Unique Code Generator',
    'page callback' => 'unique_code_generator_settings',
    'access arguments' => array(
      'administer unique code generator'
    ),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
  );
  $items['unique_generator/create'] = array(
    'title' => 'Unique Code Generator',
    'page callback' => 'unique_code_generator_creator',
    'access arguments' => array(
      'administer unique code generator'
    ),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
  );
  return $items;
}
function unique_code_generator_settings(){
$id0 = unique_code_generator_Random(0,'mix',10);
$id1 = unique_code_generator_Random(1,'mix',10);
$id2 = unique_code_generator_Random(2,'mix',10);
$id3 = unique_code_generator_Random(3,'mix',10);
$id4 = unique_code_generator_Random(0,'low',10);
$id5 = unique_code_generator_Random(2,'up',10);

  $output = array ('first_para' => array(
      '#type' => 'markup',
      '#markup' => '<p>'.$id1.'</p>'.'<p>'.$id2.'</p>'.'<p>'.$id3.'</p>'.'<p>'.$id4.'</p>'.'<p>'.$id5.'</p>',
    ),
    'form' => drupal_get_form('unique_code_generator_settings_form'),
    );
    return $output;
}
function unique_code_generator_creator(){

  $output = array (
    'form' => drupal_get_form('unique_code_generator_creator_form'),
    );
    return $output;
}
/*
 * Get Token Types - Unused 
 */
function unique_code_generator_get_tokens(){
  $tokens =  token_get_info();
  $types = array();
  foreach ($tokens['tokens'] as $token_type => $value){
    array_push($types,$token_type);
  }
  return $types;
}
/*
 * unique_code_generator_Random
 * Generates a random string given the length.
 */
function unique_code_generator_Random($type = 0,$case = 'mix', $length = 10) {
  if ($type == 0)
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_-+=\\":><?/}{][.,~`';
  else if ($type == 1)
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  else if ($type == 2)
    $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  else if ($type == 3)
     $characters = '0123456789';
     
    $charactersLength = strlen($characters);
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, $charactersLength - 1)];
    }
    if ($case == 'low')
      return strtolower($randomString);
    else if ($case == 'up')
      return strtoupper($randomString);
    else
      return $randomString;
}
/*
 * Checks for equal value
 */
function db_equal($field, $value){
  $record = db_select('unique_code_generator', 'c')
  ->fields('c', array($field))
  ->condition($field,$value,'=')
  ->execute()
  ->fetchAssoc();
  return $record;
}
/*
 * Saves a key value
 */
function db_save($user, $value){
  db_insert('unique_code_generator') // Table name no longer needs {}
  ->fields(array(
  'code' => $value,
  'uid' => $user->uid,
  'created' => REQUEST_TIME,
  ))
  ->execute();
}

/*
 * Unique code generator settings form
 */
function unique_code_generator_settings_form ($form,&$form_state){
  $form = array();
  $d = variable_get('unique_code_generator');
  debug($d);
  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Random options') ,
    '#collapsible' => TRUE,
    '#description' => t('Select any options for your random generated string') ,
  );
  $form['settings']['options'] = array(
    '#type' => 'radios',
    '#title' => t('String character options'),
    '#options' => array(
        0=>t('Letters, numbers and symbols'),
        1=>t('Letters and numbers'),
        2=> t('Letters only'),
        3=>t('Numbers only'),
    ),
    '#default_value' =>'',
  );
  $form['settings']['letterscase'] = array(
    '#type' => 'radios',
    '#title' => t('Upper/Lower case'),
    '#options' => array(
        'mix'=>t('Mixed'),
        'low'=>t('Lower case only'),
        'up'=> t('Upper case only'),
    ),
    '#default_value' =>'mix',
  );
  $form['settings']['length'] = array(
    '#type' => 'textfield',
    '#title' => t('Random String length') ,
    '#default_value' =>'10',
  );
  $form['settings']['before_string'] = array(
    '#type' => 'textfield',
    '#title' => t('Content before string') ,
    '#default_value' =>'',
  );
  $form['settings']['after_string'] = array(
    '#type' => 'textfield',
    '#title' => t('Content after string') ,
    '#default_value' =>'',
  );
  $form['settings']['tokens'] = array(
    '#type' => 'fieldset',
    '#title' => t('Tokens') ,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Select any token you want') ,
  );
   $form['settings']['tokens']['token_help'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('node','user'),
    );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

function unique_code_generator_settings_form_submit($form, &$form_state){
  $settings['before_string'] = $form_state['values']['before_string'];
  $settings['after_string'] = $form_state['values']['after_string'];
  $settings['characters'] = $form_state['values']['options'];
  $settings['letterscase'] =$form_state['values']['letterscase'];
  $settings['length'] = $form_state['values']['length']; 
  variable_set('unique_code_generator', $settings);
}
function unique_code_generator_creator_form($form, &$form_state){
  $settings= variable_get('unique_code_generator');
  global $user;
  if (strpos($settings['before_string'],'[user:') !== false ) {

    $settings['before_string'] = token_replace($settings['before_string'], array('user'=>$user));
  } else if (strpos($settings['before_string'],'[node:') !== false ) {
    if (arg(0) == 'node')
      $node = node_load(arg(1));
    $settings['before_string'] = token_replace($settings['before_string'], array('node'=>$node));
  } else {
    $settings['before_string'] = token_replace($settings['before_string']);
  }
  if (strpos($settings['after_string'],'[user:') !== false ) {
    $settings['after_string'] = token_replace($settings['after_string'], array('user'=>$user));
  } else if (strpos($settings['after_string'],'[node:') !== false ) {
    if (arg(0) == 'node')
      $node = node_load(arg(1));
    $settings['after_string'] = token_replace($settings['after_string'], array('node'=>$node));
  } else {
    $settings['after_string'] = token_replace($settings['after_string']);
  }
  if(empty($form_state['values']['number_of_strings']))
    $form_state['values']['number_of_strings'] = 0;

  $number = intval ($form_state['values']['number_of_strings']);
  $form = array();
  $form['number_of_strings'] = array(
    '#type' => 'textfield',
    '#title' => t('Random String length') ,
    '#default_value' => 1,
  );
  $form['results'] = array(
    '#type' => 'fieldset',
    '#title' => t('Results') ,
    '#prefix' => '<div id="wrapper-gen">',
    '#suffix' => '</div>',
  );
  for ($i=0;$i<$number;$i++){
    $string= unique_code_generator_Random($settings['characters'],$settings['letterscase'],$settings['length']);
    $form['results']['result-'.$i] = array(
      '#type' => 'textfield',
      '#title' => t('Key No').$i,
      '#disabled' => FALSE,
      '#value' =>$settings['before_string'].$string.$settings['after_string'],
    );
  }
  $form['generate'] = array(
    '#type'  => 'button',
    '#name'  => 'Generate',
    '#value' => t('Generate!'),
    '#ajax'  => array(
      'callback' => 'unique_code_generator_creator_callback',
      'wrapper'  => 'wrapper-gen',
      'method'   => 'replace',
      'effect'   => 'fade',
      'event' => 'click',
    ),
  );
  $form['save'] = array(
    '#type' => 'submit',
    '#name'  => 'Save',
    '#value' => t('Save') ,
  );
return $form;
}
function unique_code_generator_creator_callback($form, &$form_state){
  return ($form['results']);
}

function unique_code_generator_creator_form_submit($form, &$form_state){
  $message = t("Saved Values are :");
  $saved = "<strong>".$message."</strong><ul>";
  if (!isset($user))
    global $user;
  foreach ($form_state['values'] as $key => $value){
    if (strpos($key,'result-') !== false){
      if (db_equal('code',$value) !==false){
        $i--;
        continue;
      } else {
        db_save($user,$value);
        $saved .= '<li>'.$value.'</li>';
      }
    } 
  }
  $saved .="</ul>";
  drupal_set_message($saved);
}
